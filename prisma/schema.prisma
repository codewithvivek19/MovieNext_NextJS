// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Generate more precise TypeScript types
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  first_name    String?
  last_name     String?
  phone         String?
  profile_image String?
  role          UserRole  @default(USER)
  is_admin      Boolean   @default(false)
  last_login    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  bookings      Booking[]

  @@index([email])
  @@index([role])
}

enum UserRole {
  USER
  ADMIN
}

model Movie {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  poster       String
  duration     Int
  rating       Float
  release_date DateTime
  language     String
  genres       String // Store as JSON string: ["Action", "Adventure"]
  cast         String // Store as JSON string: [{"name": "Actor Name", "role": "Role Name"}]
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  showtimes    Showtime[]
}

model Theater {
  id               Int        @id @default(autoincrement())
  name             String
  location         String
  rating           Float
  seating_capacity Int        @default(100)
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  showtimes        Showtime[]
}

model Showtime {
  id              Int       @id @default(autoincrement())
  movie           Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId         Int       @map("movie_id")
  theater         Theater   @relation(fields: [theaterId], references: [id], onDelete: Cascade)
  theaterId       Int       @map("theater_id")
  // Store date with time component zeroed out (00:00:00)
  date            DateTime  
  // Time format should be consistent: either "HH:MM" (24-hour) or "H:MM AM/PM" (12-hour)
  time            String    
  // Format options: "standard", "premium", "imax", "vip"
  format          String    
  // Price in INR (whole number)
  price           Int
  available_seats Int       @default(0)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  bookings        Booking[]
}

model Booking {
  id                Int           @id @default(autoincrement())
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String        @map("user_id")
  showtime          Showtime      @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  showtimeId        Int           @map("showtime_id")
  seats             String        // Store as JSON string: ["A1", "A2"]
  total_price       Int
  booking_reference String        @unique
  payment_method    String?       // e.g., "card", "upi", "netbanking"
  status            BookingStatus @default(CONFIRMED)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
